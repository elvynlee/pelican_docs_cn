编写内容
###############

文章和页面
==================

在Pelican中，"文章" 是按时间顺序的内容，好比博客中的文章，因此它与日期相关联。

而"页面"则是不经常更改的内容（比如 “关于”页面，或者“联系”页面）。

你可以在Pelican官方库的 ``samples/content/`` 找到相关的范例。

.. _internal_metadata:

文件元数据
=============

Pelican 会自动尝试从文件系统中获取需要的信息（例如你的文章的分类类目），
然而有一些信息仍需要你在文件中以元数据的形式提供。

如果你用reStructuredText格式写文章，你可以通过以下语法在文件内提供元数据
（文件扩展名为 ``.rst`` ）::

    标题标题标题
    ##############

    :date: 2010-10-03 10:20
    :modified: 2010-10-04 18:40
    :tags: thats, awesome
    :category: yeah
    :slug: my-super-post
    :authors: Alexis Metaireau, Conan Doyle
    :summary: 摘要摘要，供索引及feeds用

其中的作者列表Authors和标签列表tags，可以用分号当分隔符，这样单个作者名中或tag中可以包含逗号::

    :tags: pelican, publishing tool; pelican, bird
    :authors: Metaireau, Alexis; Doyle, Conan

Pelican实现扩展支持reStructuredText文件中使用 ``abbr`` HTML标签. 如果要使用的话，在文件中类似下面这样写::

    这里的内容会被编译 :abbr:`HTML (HyperText Markup Language)`.

你还可以用Markdown编写（扩展名为 ``.md``, ``.markdown``, ``.mkd`` 或者 ``.mdown`` 的文件）。
不过需要确保安装了 ``Markdown`` 模块（通过命令 ``pip install Markdown`` 安装）。

Pelican也支持Markdown的扩展 `Markdown Extensions`_ ，如果这些扩展没有被包含在 ``Markdown`` 模块中的话，
则需要单独安装， 安装后可以在  ``Markdown`` 设置中加载。


Markdown中写元数据的语法如下::

    Title: 标题标题
    Date: 2010-12-03 10:20
    Modified: 2010-12-05 19:30
    Category: Python
    Tags: pelican, publishing
    Slug: my-super-post
    Authors: Alexis Metaireau, Conan Doyle
    Summary: 摘要摘要

    正文内容内容

你还可以在python模板中使用自己的元数据关键字（只要它们不与保留的元数据关键字冲突）。 以下是元数据保留关键字列表:

* `Title`
* `Tags`
* `Date`
* `Modified`
* `Status`
* `Category`
* `Author`
* `Authors`
* `Slug`
* `Summary`
* `Template`
* `Save_as`
* `Url`

其他文件格式（如 AsciiDoc_ ）可通过插件获得。 请参阅Pelican官方库中 `pelican-plugins`_ 部分。

Pelican还可以处理以``.html``和``.htm``结尾的HTML文件。 Pelican以非常简单的方式解释HTML，
从 ``meta`` 标签读取元数据，从 ``title`` 标签读取标题，从 ``body`` 标签读取正文::

    <html>
        <head>
            <title>My super title</title>
            <meta name="tags" content="thats, awesome" />
            <meta name="date" content="2012-07-09 22:28" />
            <meta name="modified" content="2012-07-10 20:14" />
            <meta name="category" content="yeah" />
            <meta name="authors" content="Alexis Métaireau, Conan Doyle" />
            <meta name="summary" content="Short version for index and feeds" />
        </head>
        <body>
            This is the content of my super blog post.
        </body>
    </html>

HTML的标准元数据中有一个要注意的地方：标签tag在Pelican标准中是通过 ``tags`` 元数据指定的；
而在HTML标准中则通过 ``keywords`` 元数据指定。这两者可以互换使用。

请注意，除标题必需外，其他元数据都不是必需的：
如果没有指定日期并且 ``DEFAULT_DATE`` 设置为 ``'fs'`` 的话，Pelican将根据文件的 “mtime” 时间戳生成日期；
而分类则会根据文件所在的目录决定。例如，位于 ``python/foobar/myfoobar.rst`` 的文件将被归类为 ``foobar`` 。
如果你不想Pelican用子目录分类，而想以其他方式组织文件，你可以设置 ``USE_FOLDER_AS_CATEGORY`` 设置为 ``False`` 。
在解析日期元数据时，Pelican遵循W3C标准  `suggested subset ISO 8601`__ 。

所以标题是唯一需要的元数据。如果这个也让你不爽，不用担心。
你可以使用文章的文件名作为标题，而不是每次在文件内的元数据部分手动指定。例如，一篇Markdown文章的文件名为 ``Publishing via Pelican.md`` ，
系统自动提取出 *Publishing via Pelican* 作为文章的标题title。
你可以将下面这条语句添加到设置文件中以启用这个功能::

    FILENAME_METADATA = '(?P<title>.*)'

.. note::

   在尝试不同的设置（尤其是元数据设置）时，有可能会受缓存干扰，作的修改可能不见生效。 
   在这种情况下，可以使用 ``LOAD_CONTENT_CACHE = False`` 禁用缓存或
   使用 ``--ignore-cache`` 命令行开关。

__ `W3C ISO 8601`_

``modified`` 记录的应该是你对文章最后的一次更新，如果没有其它指定默认为 ``date`` 。
此外，你可以在模板中显示 ``modified`` ，当你修改文章后将 ``modified`` 设置为当前日期时，
Feed阅读器中的Feed条目将自动更新。

``authors`` 是以逗号分隔的文章作者列表。如果只有一个作者，你可以使用 ``author`` 字段。

如果不想在文件中写摘要提供summary元数据，则可以使用 ``SUMMARY_MAX_LENGTH`` 来设置从文章起始读取多少个字数作
为文章的摘要。

在设置 ``FILENAME_METADATA`` 属性这里，你可以用正则表达式从文件名中提取出元数据。
匹配的所有命名组都将设置在元数据对象中。 ``FILENAME_METADATA`` 设置的默认值是仅从文件名中提取日期。
例如，如果你想提取日期date和slug，你可以这样写： ``'(?P<date>\d{4}-\d{2}-\d{2})_(?P<slug>.*)'``

请注意，文件中可用的元数据优先于从文件名中提取的元数据。

页面
=====

如果在content目录中创建 `pages` 文件夹，所有pages目录中的文件将被生成静态页面，
例如 **关于** 页面或 **联系人** 页面。 （请参阅下面的示例文件系统的布局。）

您可以设置 ``DISPLAY_PAGES_ON_MENU`` 来控制是否在主导航菜单中显示这些页面。（默认为 ``True`` 。）

如果你想要某些页面不要在导航菜单中显示或者不要被指向，可以在页面文件的元数据中添加 ``status: hidden`` 属性。
比如制作一个配合主题风格的404静态页面时，就可以给这个页面作这样的设置。

静态内容
==============

静态文件是除了文章和页面之外的文件，这些文件不需要处理，会直接被复制到output输出文件夹。
您可以在项目配置文件 ``pelicanconf.py`` 中的 ``STATIC_PATHS`` 指定静态文件。 
Pelican默认设置了 ``images`` 为静态文件目录，其他目录则需要你手动添加。
此外，还包括明确链接到的静态文件（见下文）。

同一目录中的混合内容
-----------------------------------

Starting with Pelican 3.5, static files can safely share a source directory
with page source files, without exposing the page sources in the generated
site. Any such directory must be added to both ``STATIC_PATHS`` and
``PAGE_PATHS`` (or ``STATIC_PATHS`` and ``ARTICLE_PATHS``). Pelican will
identify and process the page source files normally, and copy the remaining
files as if they lived in a separate directory reserved for static files.

Note: Placing static and content source files together in the same source
directory does not guarantee that they will end up in the same place in the
generated site. The easiest way to do this is by using the ``{attach}`` link
syntax (described below). Alternatively, the ``STATIC_SAVE_AS``,
``PAGE_SAVE_AS``, and ``ARTICLE_SAVE_AS`` settings (and the corresponding
``*_URL`` settings) can be configured to place files of different types
together, just as they could in earlier versions of Pelican.

.. _ref-linking-to-internal-content:

Linking to internal content
===========================

From Pelican 3.1 onwards, it is now possible to specify intra-site links to
files in the *source content* hierarchy instead of files in the *generated*
hierarchy. This makes it easier to link from the current post to other content
that may be sitting alongside that post (instead of having to determine where
the other content will be placed after site generation).

To link to internal content (files in the ``content`` directory), use the
following syntax for the link target: ``{filename}path/to/file``
Note: forward slashes, ``/``,
are the required path separator in the ``{filename}`` directive
on all operating systems, including Windows.

For example, a Pelican project might be structured like this::

    website/
    ├── content
    │   ├── category/
    │   │   └── article1.rst
    │   ├── article2.md
    │   └── pages
    │       └── about.md
    └── pelican.conf.py

In this example, ``article1.rst`` could look like this::

    The first article
    #################

    :date: 2012-12-01 10:02

    See below intra-site link examples in reStructuredText format.

    `a link relative to the current file <{filename}../article2.md>`_
    `a link relative to the content root <{filename}/article2.md>`_

and ``article2.md``::

    Title: The second article
    Date: 2012-12-01 10:02

    See below intra-site link examples in Markdown format.

    [a link relative to the current file]({filename}category/article1.rst)
    [a link relative to the content root]({filename}/category/article1.rst)

Linking to static files
-----------------------

You can link to static content using ``{static}path/to/file``. Files linked to
with this syntax will automatically be copied to the output directory, even if
the source directories containing them are not included in the ``STATIC_PATHS``
setting of the project's ``pelicanconf.py`` file.

For example, a project's content directory might be structured like this::

    content
    ├── images
    │   └── han.jpg
    ├── pdfs
    │   └── menu.pdf
    └── pages
        └── test.md

``test.md`` would include::

    ![Alt Text]({static}/images/han.jpg)
    [Our Menu]({static}/pdfs/menu.pdf)

Site generation would then copy ``han.jpg`` to ``output/images/han.jpg``,
``menu.pdf`` to ``output/pdfs/menu.pdf``, and write the appropriate links
in ``test.md``.

If you use ``{static}`` to link to an article or a page, this will be turned
into a link to its source code.

Attaching static files
----------------------

Starting with Pelican 3.5, static files can be "attached" to a page or article
using this syntax for the link target: ``{attach}path/to/file`` This works
like the ``{static}`` syntax, but also relocates the static file into the
linking document's output directory. If the static file originates from a
subdirectory beneath the linking document's source, that relationship will be
preserved on output. Otherwise, it will become a sibling of the linking
document.

This only works for linking to static files.

For example, a project's content directory might be structured like this::

    content
    ├── blog
    │   ├── icons
    │   │   └── icon.png
    │   ├── photo.jpg
    │   └── testpost.md
    └── downloads
        └── archive.zip

``pelicanconf.py`` would include::

    PATH = 'content'
    ARTICLE_PATHS = ['blog']
    ARTICLE_SAVE_AS = '{date:%Y}/{slug}.html'
    ARTICLE_URL = '{date:%Y}/{slug}.html'

``testpost.md`` would include::

    Title: Test Post
    Category: test
    Date: 2014-10-31

    ![Icon]({attach}icons/icon.png)
    ![Photo]({attach}photo.jpg)
    [Downloadable File]({attach}/downloads/archive.zip)

Site generation would then produce an output directory structured like this::

    output
    └── 2014
        ├── archive.zip
        ├── icons
        │   └── icon.png
        ├── photo.jpg
        └── test-post.html

Notice that all the files linked using ``{attach}`` ended up in or beneath
the article's output directory.

If a static file is linked multiple times, the relocating feature of
``{attach}`` will only work in the first of those links to be processed.
After the first link, Pelican will treat ``{attach}`` like ``{static}``.
This avoids breaking the already-processed links.

**Be careful when linking to a file from multiple documents:**
Since the first link to a file finalizes its location and Pelican does
not define the order in which documents are processed, using ``{attach}`` on a
file linked by multiple documents can cause its location to change from one
site build to the next. (Whether this happens in practice will depend on the
operating system, file system, version of Pelican, and documents being added,
modified, or removed from the project.) Any external sites linking to the
file's old location might then find their links broken. **It is therefore
advisable to use {attach} only if you use it in all links to a file, and only
if the linking documents share a single directory.** Under these conditions,
the file's output location will not change in future builds. In cases where
these precautions are not possible, consider using ``{static}`` links instead
of ``{attach}``, and letting the file's location be determined by the project's
``STATIC_SAVE_AS`` and ``STATIC_URL`` settings. (Per-file ``save_as`` and
``url`` overrides can still be set in ``EXTRA_PATH_METADATA``.)

Linking to authors, categories, index and tags
----------------------------------------------

You can link to authors, categories, index and tags using the ``{author}name``,
``{category}foobar``, ``{index}`` and ``{tag}tagname`` syntax.

Deprecated internal link syntax
-------------------------------

To remain compatible with earlier versions, Pelican still supports vertical
bars (``||``) in addition to curly braces (``{}``) for internal links. For
example: ``|filename|an_article.rst``, ``|tag|tagname``, ``|category|foobar``.
The syntax was changed from ``||`` to ``{}`` to avoid collision with Markdown
extensions or reST directives. Similarly, Pelican also still supports linking
to static content with ``{filename}``. The syntax was changed to ``{static}``
to allow linking to both generated articles and pages and their static sources.

Support for the old syntax may eventually be removed.


Importing an existing site
==========================

It is possible to import your site from WordPress, Tumblr, Dotclear, and RSS
feeds using a simple script. See :ref:`import`.

Translations
============

It is possible to translate articles. To do so, you need to add a ``lang`` meta
attribute to your articles/pages and set a ``DEFAULT_LANG`` setting (which is
English [en] by default). With those settings in place, only articles with the
default language will be listed, and each article will be accompanied by a list
of available translations for that article.

.. note::

   This core Pelican functionality does not create sub-sites
   (e.g. ``example.com/de``) with translated templates for each
   language. For such advanced functionality the `i18n_subsites
   plugin`_ can be used.

By default, Pelican uses the article's URL "slug" to determine if two or more
articles are translations of one another. (This can be changed with the
``ARTICLE_TRANSLATION_ID`` setting.) The slug can be set manually in the file's
metadata; if not set explicitly, Pelican will auto-generate the slug from the
title of the article.

Here is an example of two articles, one in English and the other in French.

The English article::

    Foobar is not dead
    ##################

    :slug: foobar-is-not-dead
    :lang: en

    That's true, foobar is still alive!

And the French version::

    Foobar n'est pas mort !
    #######################

    :slug: foobar-is-not-dead
    :lang: fr

    Oui oui, foobar est toujours vivant !

Post content quality notwithstanding, you can see that only item in common
between the two articles is the slug, which is functioning here as an
identifier. If you'd rather not explicitly define the slug this way, you must
then instead ensure that the translated article titles are identical, since the
slug will be auto-generated from the article title.

If you do not want the original version of one specific article to be detected
by the ``DEFAULT_LANG`` setting, use the ``translation`` metadata to specify
which posts are translations::

    Foobar is not dead
    ##################

    :slug: foobar-is-not-dead
    :lang: en
    :translation: true

    That's true, foobar is still alive!


.. _internal_pygments_options:

Syntax highlighting
===================

Pelican can provide colorized syntax highlighting for your code blocks.
To do so, you must use the following conventions inside your content files.

For reStructuredText, use the ``code-block`` directive to specify the type
of code to be highlighted (in these examples, we'll use ``python``)::

    .. code-block:: python

       print("Pelican is a static site generator.")

For Markdown, which utilizes the `CodeHilite extension`_ to provide syntax
highlighting, include the language identifier just above the code block,
indenting both the identifier and the code::

    There are two ways to specify the identifier:

        :::python
        print("The triple-colon syntax will *not* show line numbers.")

    To display line numbers, use a path-less shebang instead of colons:

        #!python
        print("The path-less shebang syntax *will* show line numbers.")

The specified identifier (e.g. ``python``, ``ruby``) should be one that
appears on the `list of available lexers <http://pygments.org/docs/lexers/>`_.

When using reStructuredText the following options are available in the
code-block directive:

=============   ============  =========================================
Option          Valid values  Description
=============   ============  =========================================
anchorlinenos   N/A           If present wrap line numbers in <a> tags.
classprefix     string        String to prepend to token class names
hl_lines        numbers       List of lines to be highlighted, where
                              line numbers to highlight are separated
                              by a space. This is similar to
                              ``emphasize-lines`` in Sphinx, but it
                              does not support a range of line numbers
                              separated by a hyphen, or comma-separated
                              line numbers.
lineanchors     string        Wrap each line in an anchor using this
                              string and -linenumber.
linenos         string        If present or set to "table" output line
                              numbers in a table, if set to
                              "inline" output them inline. "none" means
                              do not output the line numbers for this
                              table.
linenospecial   number        If set every nth line will be given the
                              'special' css class.
linenostart     number        Line number for the first line.
linenostep      number        Print every nth line number.
lineseparator   string        String to print between lines of code,
                              '\n' by default.
linespans       string        Wrap each line in a span using this and
                              -linenumber.
nobackground    N/A           If set do not output background color for
                              the wrapping element
nowrap          N/A           If set do not wrap the tokens at all.
tagsfile        string        ctags file to use for name definitions.
tagurlformat    string        format for the ctag links.
=============   ============  =========================================

Note that, depending on the version, your Pygments module might not have
all of these options available. Refer to the *HtmlFormatter* section of the
`Pygments documentation <http://pygments.org/docs/formatters/>`_ for more
details on each of the options.

For example, the following code block enables line numbers, starting at 153,
and prefixes the Pygments CSS classes with *pgcss* to make the names
more unique and avoid possible CSS conflicts::

    .. code-block:: identifier
        :classprefix: pgcss
        :linenos: table
        :linenostart: 153

       <indented code block goes here>

It is also possible to specify the ``PYGMENTS_RST_OPTIONS`` variable in your
Pelican settings file to include options that will be automatically applied to
every code block.

For example, if you want to have line numbers displayed for every code block
and a CSS prefix you would set this variable to::

    PYGMENTS_RST_OPTIONS = {'classprefix': 'pgcss', 'linenos': 'table'}

If specified, settings for individual code blocks will override the defaults in
your settings file.

Publishing drafts
=================

If you want to publish an article or a page as a draft (for friends to review
before publishing, for example), you can add a ``Status: draft`` attribute to
its metadata. That article will then be output to the ``drafts`` folder and not
listed on the index page nor on any category or tag page.

If your articles should be automatically published as a draft (to not
accidentally publish an article before it is finished) include the status in
the ``DEFAULT_METADATA``::

    DEFAULT_METADATA = {
        'status': 'draft',
    }

To publish a post when the default status is ``draft``, update the post's
metadata to include ``Status: published``.

.. _W3C ISO 8601: https://www.w3.org/TR/NOTE-datetime
.. _AsciiDoc: http://www.methods.co.nz/asciidoc/
.. _pelican-plugins: https://github.com/getpelican/pelican-plugins
.. _Markdown Extensions: https://python-markdown.github.io/extensions/
.. _CodeHilite extension: https://python-markdown.github.io/extensions/code_hilite/#syntax
.. _i18n_subsites plugin: https://github.com/getpelican/pelican-plugins/tree/master/i18n_subsites
